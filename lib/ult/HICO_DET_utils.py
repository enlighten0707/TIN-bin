
from __future__ import print_function
from __future__ import division
import numpy as np
import cPickle as pickle

obj_range = [
    (161, 170), (11, 24), (66, 76), (147, 160), (1, 10), 
    (55, 65), (187, 194), (568, 576), (32, 46), (563, 567), 
    (326, 330), (503, 506), (415, 418), (244, 247), (25, 31), 
    (77, 86), (112, 129), (130, 146), (175, 186), (97, 107), 
    (314, 325), (236, 239), (596, 600), (343, 348), (209, 214), 
    (577, 584), (353, 356), (539, 546), (507, 516), (337, 342), 
    (464, 474), (475, 483), (489, 502), (369, 376), (225, 232), 
    (233, 235), (454, 463), (517, 528), (534, 538), (47, 54), 
    (589, 595), (296, 305), (331, 336), (377, 383), (484, 488), 
    (253, 257), (215, 224), (199, 208), (439, 445), (398, 407), 
    (258, 264), (274, 283), (357, 363), (419, 429), (306, 313), 
    (265, 273), (87, 92), (93, 96), (171, 174), (240, 243), 
    (108, 111), (551, 558), (195, 198), (384, 389), (394, 397), 
    (435, 438), (364, 368), (284, 290), (390, 393), (408, 414), 
    (547, 550), (450, 453), (430, 434), (248, 252), (291, 295), 
    (585, 588), (446, 449), (529, 533), (349, 352), (559, 562)
]
cnt = np.array([
    71,113,38,204,125,52,260,278,9,106,30,1380,124,150,26,17,116,89,1447,1183,1502,182,6,168,12,93,113,12,15,131,28,47,189,28,81,11,103,35,1382,339,182,997,594,34,8,106,159,200,541,55,13,20,27,195,137,12,532,30,29,43,789,431,10,5,107,31,6,393,67,79,5,28,35,484,149,306,9,8,197,101,13,95,65,10,6,40,43,117,92,1005,6,97,19,253,658,39,16,73,90,10,10,54,34,52,12,67,108,10,789,993,79,119,7,17,12,377,22,211,21,28,188,25,90,23,47,122,25,8,113,25,38,750,36,181,19,5,13,96,141,1253,440,1001,124,125,28,33,923,65,141,8,99,17,408,1131,1419,1313,278,18,8,138,110,23,552,314,81,10,6,58,11,249,14,14,11,61,25,54,53,171,39,7,30,6,119,34,6,92,77,137,8,7,292,163,10,143,24,9,132,88,10,26,61,239,41,30,35,7,7,22,914,57,23,18,983,89,14,139,10,129,321,117,14,24,7,104,53,90,810,6,407,7,716,7,194,194,6,23,33,51,8,7,345,156,37,19,107,1463,107,118,882,666,769,64,81,33,10,7,40,6,42,63,6,6,6,17,345,119,235,80,166,32,15,87,48,73,12,29,46,188,28,6,6,8,25,215,586,198,6,278,151,6,58,51,11,16,148,157,145,353,21,29,105,34,54,6,67,12,58,138,262,26,86,6,40,46,125,8,21,7,18,91,261,135,41,287,11,6,29,17,11,122,157,122,36,10,7,21,112,348,503,24,267,41,176,17,28,7,266,42,63,59,7,6,80,144,10,23,139,79,6,109,217,39,29,57,8,59,243,56,53,220,642,515,109,138,472,39,268,651,44,6,657,9,28,257,44,582,19,270,58,6,12,12,20,51,57,3,25,6,7,7,58,7,8,8,11,7,13,9,16,80,10,24,35,56,38,25,6,113,5,84,37,61,110,180,48,55,13,6,69,7,45,9,27,30,216,77,8,23,39,6,8,132,214,18,51,158,252,104,27,8,15,14,63,137,593,337,394,1185,58,1842,25,1480,50,11,52,83,25,141,34,11,546,581,716,13,10,42,74,180,344,604,602,657,10,290,115,6,48,17,64,220,109,139,251,381,105,321,27,83,6,6,168,14,28,14,4,32,227,130,228,6,14,13,34,31,6,97,231,11,304,21,9,29,6,240,181,18,6,61,47,240,68,8,35,186,241,6,112,14,71,6,108,26,42,42,659,67,8,7,6,6,11,6,8,19,68,8,10,108,252,351,6,17,15,19,16,15,121,25,183,47,79,25,206,154,17,74,889,1222,10,19,14,15,943,113,23,25,6,61,26,395,62,49,6,6,191,11,8,8,41,8
])

det_thresh=[59,49,98,59,95,89,2,56,87,39,61,60,70,86,98,98,83,97,75,10,10,1,99,99,93,53,97,38,99,99,92,19,89,99,0,44,32,90,60,72,60,22,51,95,98,69,58,70,50,9,97,96,89,80,69,99,9,99,98,91,4,11,98,90,68,94,99,10,66,94,9,67,80,0,96,24,97,9,0,0,9,33,9,97,99,11,99,99,90,90,67,97,26,10,60,58,55,92,80,84,98,53,90,55,0,90,79,93,55,20,90,4,58,98,6,0,95,0,4,84,21,96,9,30,98,7,95,91,52,97,94,0,0,89,90,99,98,89,2,7,55,8,90,79,94,49,66,39,9,99,57,89,70,3,2,67,2,99,99,9,95,99,89,80,29,98,99,99,9,99,80,60,15,79,90,97,90,30,30,99,92,80,0,81,90,91,98,9,78,98,20,79,99,85,97,44,48,99,91,79,90,92,8,9,59,90,28,99,81,70,8,71,80,95,91,91,90,98,90,93,92,98,96,99,90,8,96,96,90,96,90,99,82,82,92,90,0,89,40,96,10,30,9,98,50,0,88,82,0,80,20,9,90,98,70,90,90,19,90,60,0,31,98,99,81,70,1,93,80,96,99,75,89,92,41,9,90,92,9,9,87,99,87,95,97,98,99,97,99,99,79,99,0,70,99,99,90,30,99,83,90,99,83,43,69,90,69,9,30,5,90,99,90,99,83,99,98,93,83,99,82,99,59,23,96,91,98,9,9,47,7,8,8,90,90,92,98,80,71,89,97,94,68,8,29,79,64,11,90,90,6,84,99,79,70,99,90,91,94,91,80,98,19,4,8,4,30,82,95,70,90,93,90,96,93,93,82,81,6,9,1,94,67,85,80,22,80,23,67,8,90,60,89,96,90,80,9,86,59,70,69,9,0,8,28,96,80,8,7,8,99,8,90,90,8,9,8,0,99,84,98,9,80,90,98,4,94,90,19,91,89,89,91,9,8,85,0,69,96,97,89,95,90,90,9,60,90,75,9,89,90,99,90,91,60,92,70,70,92,30,7,72,91,94,70,90,94,42,90,70,40,90,80,95,94,83,90,80,80,80,81,83,96,60,90,8,6,69,9,97,90,98,90,90,99,94,91,99,99,91,90,84,0,0,0,89,60,90,81,9,96,9,20,9,99,89,82,97,84,90,0,97,47,96,93,98,95,19,92,42,60,90,99,95,93,97,99,82,90,9,40,98,98,8,90,99,0,0,4,61,6,9,8,78,80,13,96,5,70,70,80,98,96,0,90,91,9,68,19,83,97,97,0,0,97,49,54,63,90,99,98,98,4,92,96,96,96,69,49,1,92,99,98,91,23,0,90,80,13,99,]   

class simpleLoader():
    def __init__(self, idx, batch_size):
        self.idx = idx
        self.cur = 0
        self.bz  = batch_size
        self.len = len(self.idx)
        print("Batchsize = %d"%self.bz)
        
    def get_batch(self):
        if self.cur + self.bz < self.len:
            if self.cur == 0:
                np.random.shuffle(self.idx)
            tmp = self.cur
            self.cur += self.bz
            return self.idx[tmp:self.cur]
        else:
            tmp = self.cur
            self.cur = 0
            return self.idx[tmp:]

def iou(bb1, bb2, debug = False):
    x1 = bb1[2] - bb1[0]
    y1 = bb1[3] - bb1[1]
    if x1 < 0:
        x1 = 0
    if y1 < 0:
        y1 = 0
    
    
    x2 = bb2[1] - bb2[0]
    y2 = bb2[3] - bb2[2]
    if x2 < 0:
        x2 = 0
    if y2 < 0:
        y2 = 0
    
    
    xiou = min(bb1[2], bb2[1]) - max(bb1[0], bb2[0])
    yiou = min(bb1[3], bb2[3]) - max(bb1[1], bb2[2])
    if xiou < 0:
        xiou = 0
    if yiou < 0:
        yiou = 0

    if debug:
        print(x1, y1, x2, y2, xiou, yiou)
        print(x1 * y1, x2 * y2, xiou * yiou)
    if xiou * yiou <= 0:
        return 0
    else:
        return xiou * yiou / (x1 * y1 + x2 * y2 - xiou * yiou)

def calc_hit(det, gtbox):
    gtbox = gtbox.astype(np.float64)
    hiou = iou(det[:4], gtbox[:4])
    oiou = iou(det[4:], gtbox[4:])
    return min(hiou, oiou)

def calc_ap(scores, bboxes, keys, hoi_id, begin):
    score = scores[:, hoi_id - begin]
    hit = []
    idx = np.argsort(score)[::-1]
    gt_bbox = pickle.load(open('/Disk1/yonglu/DR-3D/lib/ult/gt_hoi_py2/hoi_%d.pkl' % hoi_id, 'rb'))
    npos = 0
    used = {}
    
    for key in gt_bbox.keys():
        npos += gt_bbox[key].shape[0]
        used[key] = set()
    if len(idx) == 0:
        return 0, 0
    print(len(idx))
    for i in range(min(len(idx), 19999)):
        pair_id = idx[i]
        bbox = bboxes[pair_id, :]
        key  = keys[pair_id]
        if key in gt_bbox:
            maxi = 0.0
            k    = -1
            for i in range(gt_bbox[key].shape[0]):
                tmp = calc_hit(bbox, gt_bbox[key][i, :])
                if maxi < tmp:
                    maxi = tmp
                    k    = i
            if k in used[key] or maxi < 0.5:
                hit.append(0.)
            else:
                hit.append(1.)
                used[key].add(k)
        else:
            hit.append(0.)
    bottom = np.array(range(len(hit))) + 1.
    hit    = np.cumsum(hit)
    rec    = hit / float(npos)
    prec   = hit / bottom
    ap     = 0.0
    for i in range(11):
        mask = rec >= (i / 10.)
        if np.sum(mask) > 0.:
            ap += np.max(prec[mask]) / 11.
    return ap, np.max(rec)

def get_map(keys, scores, bboxes, hdet, odet):
    
    map  = np.zeros(600)
    mrec = np.zeros(600)
    for i in range(80):
        begin = obj_range[i][0] - 1
        end   = obj_range[i][1]
        for hoi_id in range(begin, end):
            # hthresh = det_thresh[hoi_id] // 10
            # othresh = det_thresh[hoi_id] % 10
            # hmask   = hdet[i] > hthresh / 10.
            # omask   = odet[i] > othresh / 10.
            # mask    = hmask * omask
            # select  = np.where(mask > 0)[0]
            score = scores[i][:, :]
            bbox  = bboxes[i][:, :]
            key   = keys[i][:]
            map[hoi_id], mrec[hoi_id] = calc_ap(score, bbox, key, hoi_id, begin)
    
    return map, mrec
